trigger:
  - master
  - releases/*  

pr:
  - master
  - releases/*

pool:
  vmImage: 'windows-2019'

variables:
- name: SOLUTION_NAME
  value: 'PipelineFramework.DI.sln'

steps:
- task: DotNetCoreCLI@2
  displayName: 'build all'
  inputs:
    command: build
    projects: $(SOLUTION_NAME)
    arguments: '-c release'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: 'test'
    projects: 'tests/**/*.Tests.csproj'
    arguments: '--no-build --logger trx --results-directory $(Common.TestResultsDirectory) --collect:"Code Coverage" --configuration Release /property:langversion=latest'
    publishTestResults: false

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(Common.TestResultsDirectory)\*.trx'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    command: pack
    packagesToPack: '**/PipelineFramework.LightInject.csproj;**/PipelineFramework.Autofac.csproj'
    configuration: release
    packDirectory: '$(Build.ArtifactStagingDirectory)'

- task: NuGetCommand@2
  displayName: Publish
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranchName'], 'master'))
  inputs:
    command: push
    packagesToPack: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    allowPackageConflicts: true
    nuGetFeedType: external
    publishFeedCredentials: nuget.org
